<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Copyright 2016 Huawei Technologies Co., Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.openo.sdno.mss.dao.intf.IInvDataHandler">

    <!-- Clean up table locks when rebooting at the first time. 
         It is used to avoid initialization failure in case that liquibase locked tables under some exceptional situations. 
    -->
    <update id="clearLockTable">
        DELETE FROM DATABASECHANGELOGLOCK
    </update>
    <select id="queryLockTable" resultType="hashmap">
        SELECT * FROM DATABASECHANGELOGLOCK
    </select>

    <!-- Check whether a database can be connected successfully. -->
    <select id="isDBConnectedOK" resultType="string">
        select * from `INFORMATION_SCHEMA`.`CHARACTER_SETS` LIMIT 0, 1
    </select>

    <!-- Check whether a database is writable. -->
    <update id="isDBWritable">
        CREATE TABLE testWritable (testID char(36) NOT NULL)
    </update>

    <!-- Delete the temporary table created for detecting whether a database is writable. -->
    <update id="dropDBWritableTestTable">
        DROP TABLE IF EXISTS testWritable
    </update>

    <!-- Check whether the DATABASECHANGELOG table exists. 
         If mainenance tool has initialized the database, corresponding process must be done. 
         Note that it only supports mysql.
    -->
    <select id="isDATABASECHANGELOGExist" resultType="string">
        select `TABLE_NAME` from `INFORMATION_SCHEMA`.`TABLES` where `TABLE_SCHEMA`='inventory' and `TABLE_NAME`='DATABASECHANGELOG'
    </select>

    <!-- Check whether a table is empty -->
    <select id="isEmptyTable" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo" resultType="string">
        select ${emptyCheckColumn} from ${tableName} limit 0,1
    </select>


    <!-- Query the number of the specified field of extention table -->
    <select id="countExtData" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo" resultType="int">
        select
        count(1) from ${tableName} where ${filter}
    </select>

    <!-- Query one record of the extension table with uuid -->
    <select id="getExtData" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo" resultType="org.openo.sdno.mss.dao.pojo.InvExtTablePojo">
        select uuid, attrname, attrvalue from ${tableName}
        where uuid = #{uuid}
    </select>

    <!-- Query record of extension table with multiple fitering conditions -->
    <select id="getExtDatas" parameterType="org.openo.sdno.mss.dao.pojo.InvTempUuidTablePojo" resultType="org.openo.sdno.mss.dao.pojo.InvExtTablePojo">
        select A.uuid, A.attrname, A.attrvalue from ${tableName}, tbl_inv_${resType}_ex as A
        where A.uuid = ${tableName}.uuid
    </select>

    <!-- Query the number of records that satisfy the filtering condition. -->
    <select id="getRowCnt" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo" resultType="int">
        select count(uuid) from ${tableName} where ${filter}
    </select>

    <select id="checkBasicAttrDataExist" parameterType="org.openo.sdno.mss.dao.pojo.InvBasicCheckerPojo" resultType="int">
        select count(uuid) from ${tblName} where ${attrName}='${attrVal}'
    </select>

    <!-- Query the number of the specified attibute that satisfy filtering conditions -->
    <select id="getStatCnt" parameterType="org.openo.sdno.mss.dao.pojo.InvStatPojo" resultType="int">
        select count(${countAttrName}) from ${tableName}
        <if test="filterAttrList != null">
            <foreach item="item" collection="filterAttrList">
                inner join ${item.tableName} on ${item.tableName}.${item.attrProperty.attrName} =
                ${tableName}.${item.attrProperty.attrName}
            </foreach>
        </if>
        <where>
            <if test="filter != null">${filter}</if>
        </where>
    </select>

    <!-- Step 1 for paginated query: first get the records whose sorting field equals "x" (asc order, turn down page)
        SELECT top 1000 * FROM tbl_inv_xx where sortfield = 'x' and fdn > 'xx' order by sortfield asc, fdn -->
    <select id="getDataWithSplitPage1" parameterType="org.openo.sdno.mss.dao.pojo.InvSplitPagePojo" resultType="hashmap">
        SELECT
        <foreach item="item" collection="basic.attrEntityList" separator=",">
            ${basic.tableName}.${item.attrName}
        </foreach>
        FROM ${basic.tableName}
        <if test="basic.filterAttrList != null">
            <foreach item="item" collection="basic.filterAttrList">
                inner join ${item.tableName} on ${item.tableName}.${item.attrProperty.attrName} =
                ${basic.tableName}.${item.attrProperty.attrName}
            </foreach>
        </if>
        <where>
            <if
                test="sortAttr != null and sortAttr.attrValue == null and uniqueAttr != null and uniqueAttr.attrValue != null">
                ${basic.tableName}.${sortAttr.attrName} IS NULL
            </if>
            <if test="sortAttr != null and sortAttr.attrValue != null">
                ${basic.tableName}.${sortAttr.attrName} = #{sortAttr.attrValue}
            </if>
            <if test="uniqueAttr != null and uniqueAttr.attrValue != null">
                and ${basic.tableName}.${uniqueAttr.attrName} &gt; #{uniqueAttr.attrValue}
            </if>
            <if test="basic.filter != null">
                and ${basic.filter}
            </if>
        </where>
        <trim prefix=" order by " prefixOverrides=",">
            <if test="sortAttr != null">
                ${basic.tableName}.${sortAttr.attrName} ${sort}
            </if>
            <if test="sortAttr != null and uniqueAttr != null and sortAttr.attrName != uniqueAttr.attrName">
                , ${basic.tableName}.${uniqueAttr.attrName}
            </if>
            <if test="sortAttr == null and uniqueAttr != null">
                , ${basic.tableName}.${uniqueAttr.attrName}
            </if>
        </trim>
        limit 0,1000
    </select>

    <!-- Step 2 for paginated query: first get the records whose sorting field is larger than "x" (desc order, turn down page)
        SELECT top 1000 * FROM tbl_inv_xx where sortfield > 'x' order by sortfield desc, fdn -->
    <select id="getDataWithSplitPage2" parameterType="org.openo.sdno.mss.dao.pojo.InvSplitPagePojo" resultType="hashmap">
        SELECT
        <foreach item="item" collection="basic.attrEntityList" separator=",">
            ${basic.tableName}.${item.attrName}
        </foreach>
        FROM ${basic.tableName}
        <if test="basic.filterAttrList != null">
            <foreach item="item" collection="basic.filterAttrList">
                inner join ${item.tableName} on ${item.tableName}.${item.attrProperty.attrName} =
                ${basic.tableName}.${item.attrProperty.attrName}
            </foreach>
        </if>
        <where>
            <if
                test="sortAttr != null and sortAttr.attrValue == null and uniqueAttr != null  and uniqueAttr.attrValue != null">
                (${basic.tableName}.${sortAttr.attrName}
                <choose>
                    <when test="sort == 'asc'"> IS NOT NULL )</when>
                    <otherwise> IS NULL and ${basic.tableName}.${uniqueAttr.attrName} &gt; #{uniqueAttr.attrValue} )
                    </otherwise>
                </choose>
            </if>
            <if test="sortAttr != null and sortAttr.attrValue != null">
                (${basic.tableName}.${sortAttr.attrName}
                <choose>
                    <when test="sort == 'asc'"> &gt; #{sortAttr.attrValue})</when>
                    <otherwise> &lt; #{sortAttr.attrValue} or ${basic.tableName}.${sortAttr.attrName} IS NULL )
                    </otherwise>
                </choose>
            </if>
            <if test="basic.filter != null">
                and ${basic.filter}
            </if>
        </where>
        <trim prefix=" order by " prefixOverrides=",">
            <if test="sortAttr != null">
                ${basic.tableName}.${sortAttr.attrName} ${sort}
            </if>
            <if test="sortAttr != null and uniqueAttr != null and sortAttr.attrName != uniqueAttr.attrName">
                , ${basic.tableName}.${uniqueAttr.attrName}
            </if>
            <if test="sortAttr == null and uniqueAttr != null">
                , ${basic.tableName}.${uniqueAttr.attrName}
            </if>
        </trim>
        limit 0, ${topCnt}
    </select>

    <!-- Query inventory data based on filtering conditions. Result sets are ordered and paginated by UUID -->
    <sql id="crossFilterSql">
        ${basic.tableName} right join
        (select ${basic.tableName}.uuid from ${basic.tableName}
        <if test="basic.filterAttrList != null">
            <foreach item="item" collection="basic.filterAttrList"> inner join ${item.tableName} on
                ${item.tableName}.${item.attrProperty.attrName} = ${basic.tableName}.${item.attrProperty.attrName}
            </foreach>
        </if>
        <where>
            <if test="basic.filter != null">(${basic.filter})</if>
            <if test="fromUuid != ''">AND ${basic.tableName}.uuid &gt; #{fromUuid} </if>
        </where>
        order by uuid limit 0, ${readCount}) b on ${basic.tableName}.uuid = b.uuid
    </sql>
    <!-- Query inventory data -->
    <select id="getData" parameterType="org.openo.sdno.mss.dao.pojo.InvCrossTablePojo" resultType="hashmap">
        <if test="extensionList == null">
            select
            <foreach item="item" collection="basic.attrEntityList" separator=",">${basic.tableName}.${item.attrName}
            </foreach>
            from
            <include refid="crossFilterSql" />
        </if>
        <if test="extensionList != null">
            select
            <foreach item="item" collection="basic.attrEntityList" separator=",">${basic.tableName}.${item.attrName}
            </foreach>
            ,
            <foreach item="item" collection="extensionList" separator=",">${item.attrName}.attrvalue as
                ${item.attrName}</foreach>
            from
            <include refid="crossFilterSql" />
            <foreach item="item" collection="extensionList" separator=" ">
                left join ${extensionList[0].tableName} ${item.attrName} on ${basic.tableName}.uuid = ${item.attrName}.uuid and
                ${item.attrName}.attrname = #{item.attrName}
            </foreach>
        </if>
        order by ${basic.tableName}.uuid
    </select>

    <select id="selectByTableFilter" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo" resultType="hashmap">
        select distinct
        <if test="tableFilterList != null">
            <foreach item="itemTable" collection="tableFilterList">
                <foreach item="attritemCol" collection="itemTable.attrPropertyList" separator=", ">${tableName}.${attritemCol.attrName}
                </foreach>
            </foreach>
        </if>
        from ${tableName}
        <if test="tableFilterList != null">
            <foreach item="item" collection="tableFilterList">
                inner join ${item.tableName} on
                <foreach item="attritem" collection="item.attrPropertyList" open="(" separator=" and " close=")">
                    ${tableName}.${attritem.attrName} = ${item.tableName}.${attritem.attrName}
                </foreach>
            </foreach>
        </if>
    </select>



    <!-- Delete inventory data. It is also used to delete relation data. -->
    <delete id="removeData" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo">
        delete from ${tableName}
        <where>
            <if test="filter != null">
                ${filter}
            </if>
        </where>
    </delete>

    <delete id="batchDeleteData" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo">
        delete from ${tableName} where uuid in
        <foreach item="item" index="index" collection="preDeleteUuidSet" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <delete id="batchDeleteRelationData" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo">
        delete from ${tableName} where ${delUuidType} in
        <foreach item="item" index="index" collection="preDeleteUuidSet" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <!-- Insert data into basic table -->
    <insert id="addDataInBasic" parameterType="org.openo.sdno.mss.dao.pojo.InvBasicTablePojo">
        insert into ${tableName}
        <foreach item="item" collection="attrEntityList" open="(" separator="," close=")">
            ${item.attrName}
        </foreach>
        values
        <foreach item="item" collection="attrEntityList" open="(" separator="," close=")">
            #{item.attrValue}
        </foreach>
    </insert>

    <insert id="batchInsertDataInBasic" parameterType="org.openo.sdno.mss.dao.pojo.InvBasicTablePojo">
        insert into ${tableName}
        <foreach item="item" collection="attrEntityList" open="(" separator="," close=")">
            ${item.attrName}
        </foreach>
        values
        <foreach item="itemRow" collection="tableRowList" separator=",">
            <foreach item="attritem" collection="itemRow.attrValueList" open="(" separator="," close=")">
                #{attritem}
            </foreach>
        </foreach>
    </insert>

    <!-- Insert data into extension table -->
    <insert id="addDataInExtension" parameterType="org.openo.sdno.mss.dao.pojo.InvExtTablePojo">
        insert into ${tableName}
        (uuid, attrname, attrvalue)
        values
        (#{uuid}, #{attrName}, #{attrValue})
    </insert>

    <insert id="batchInsertDataInExt" parameterType="org.openo.sdno.mss.dao.pojo.InvExtTablePojo">
        insert into ${tableName}
        (uuid, attrname, attrvalue)
        values
        <foreach item="itemRow" collection="tableRowList" separator=",">
            <foreach item="attritem" collection="itemRow.attrValueList" open="(" separator="," close=")">
                #{attritem}
            </foreach>
        </foreach>
    </insert>

    <!-- Update data in basic table -->
    <update id="updateDataInBasic" parameterType="org.openo.sdno.mss.dao.pojo.InvBasicTablePojo">
        update ${tableName}
        set
        <foreach item="item" collection="attrEntityList" separator=",">
            ${item.attrName}=#{item.attrValue}
        </foreach>
        where ${filter}
    </update>

    <!-- Update data in extension table -->
    <update id="updateDataInExtension" parameterType="org.openo.sdno.mss.dao.pojo.InvExtTablePojo">
        update ${tableName}
        set attrvalue=#{attrValue}
        where uuid = #{uuid} and attrname=#{attrName}
    </update>

    <!-- Crete temporary table used to compare with UUID temprary table -->
    <update id="createUuidTempTable" parameterType="org.openo.sdno.mss.dao.pojo.InvTempUuidTablePojo">
        CREATE TABLE ${tableName}
        (
        uuid char(36) NOT NULL
        )
    </update>

    <!-- Insert data into the temporary table for network equipment ID -->
    <insert id="addDataInUuidTempTable" parameterType="org.openo.sdno.mss.dao.pojo.InvTempUuidTablePojo">
        insert into ${tableName} ( uuid ) values ( #{uuid} )
    </insert>







    <!-- Delete temporary table -->
    <update id="removeTable" parameterType="String">
        DROP TABLE IF EXISTS ${value}
    </update>

    <!-- Create the temporary table for network equipment ID. Used to log database data insersion. -->
    <update id="createNeIdTempTable" parameterType="org.openo.sdno.mss.dao.pojo.InvTempDevUuidTablePojo">
        CREATE TABLE ${tableName}
        (
        tempdevuuid char(36) NOT NULL
        )
    </update>

    <!-- Insert data into the temporary table for network equipment ID. -->
    <insert id="addDataInNeIdTemp" parameterType="org.openo.sdno.mss.dao.pojo.InvTempDevUuidTablePojo">
        insert into ${tableName} ( tempdevuuid ) values ( #{devUuid} )
    </insert>

    <!-- Create the temporary table for attribute. It is used by joined-query. -->
    <update id="creatAttrTempTable" parameterType="org.openo.sdno.mss.dao.pojo.InvTempAttrFilterPojo">
        CREATE TABLE ${tableName}
        (
        ${attrProperty.attrName} ${attrProperty.attrType} NOT NULL
        )
    </update>




    <!-- For solving he performance issue of batch query by UUID -->
    <insert id="addValueList" parameterType="org.openo.sdno.mss.dao.pojo.InvTempAttrFilterPojo">
        insert into ${tableName} values
        <foreach item="item" collection="valueListCommit" separator=",">
            (#{item})
        </foreach>
    </insert>



    <!-- Insert data to relation table -->
    <insert id="addDataToRelation" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo">
        insert into ${tableName}
        <foreach item="item" collection="attrEntityList" open="(" separator="," close=")">
            ${item.attrName}
        </foreach>
        values
        <foreach item="item" collection="attrEntityList" open="(" separator="," close=")">
            #{item.attrValue}
        </foreach>
    </insert>

    <insert id="batchInsertRelation" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo">
        insert into ${tableName}
        <foreach item="item" collection="attrEntityList" open="(" separator="," close=")">
            ${item.attrName}
        </foreach>
        values
        <foreach item="itemRow" collection="tableRowList" separator=",">
            <foreach item="attritem" collection="itemRow.attrValueList" open="(" separator="," close=")">
                #{attritem}
            </foreach>
        </foreach>
    </insert>

    <!-- Update relation table. Used only during synchronization. -->
    <update id="updateRelationData" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo">
        update ${tableName}
        set
        <foreach item="item" collection="attrEntityList" separator=",">
            ${item.attrName}=#{item.attrValue}
        </foreach>
        where ${filter}
    </update>

    <!-- Query relation table: get dst_uuid through src_uuis, or vice versa -->
    <select id="getUuidbyRefUuid" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo" resultType="hashmap">
        select ${queryUuidName} from ${tableName}
        where ${filter}
    </select>
    <!-- Query relation table -->
    <select id="getRelationsbyRefUuid" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo"
        resultType="hashmap">
        select src_uuid, dst_uuid, dst_type, servicetype,
        (case relation when 0 then 'composition' when 1 then 'aggregation' when 2 then 'association' else 'unknown' end) as
        relation
        from ${tableName}
        <if test="filter != null">where ${filter}</if>

    </select>
    <!-- Batch query relation table -->
    <select id="getRelations" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo" resultType="hashmap">
        select ${tableName}.src_uuid, ${tableName}.dst_uuid, ${tableName}.dst_type, ${tableName}.servicetype,
        (case ${tableName}.relation when 0 then 'composition' when 1 then 'aggregation' when 2 then 'association' else 'unknown'
        end) as relation
        from ${tableName}
        <if test="filterAttrList != null">
            <foreach item="item" collection="filterAttrList"> inner join ${item.tableName} on
                ${item.tableName}.${item.attrProperty.attrName} = ${tableName}.${item.attrProperty.attrName}</foreach>
        </if>
        <where>
            <if test="filter != null">
                (${filter})
                <choose>
                    <when test="fromRow.srcUuid != ''"> AND </when>
                </choose>
            </if>
            <if test="fromRow.srcUuid != ''">
                ((${tableName}.src_uuid = #{fromRow.srcUuid} AND ${tableName}.dst_uuid = #{fromRow.dstUuid} AND ${tableName}.dst_type &gt;
                #{fromRow.dstType}) OR
                (${tableName}.src_uuid = #{fromRow.srcUuid} AND ${tableName}.dst_uuid &gt; #{fromRow.dstUuid}) OR
                (${tableName}.src_uuid &gt; #{fromRow.srcUuid}))
            </if>
        </where>
        order by ${tableName}.src_uuid, ${tableName}.dst_uuid, ${tableName}.dst_type limit 0, ${readCount}
    </select>
    <!-- Query relation table with a group of src_uuid. It will return all relation data that satisfy conditions. -->
    <select id="getRelationsbyBatchSrcUuid" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationTablePojo"
        resultType="hashmap">
        select ${tableName}.src_uuid, ${tableName}.dst_uuid, ${tableName}.dst_type, ${tableName}.servicetype,
        (case relation when 0 then 'composition' when 1 then 'aggregation' when 2 then 'association' else 'unknown' end) as
        relation
        from ${tableName}
        <if test="filterAttrList != null">
            <foreach item="item" collection="filterAttrList">
                inner join ${item.tableName} on ${item.tableName}.${item.attrProperty.attrName} =
                ${tableName}.${item.attrProperty.attrName}
            </foreach>
        </if>
        <if test="filter != null">where ${filter}</if>
    </select>

    <!-- Create the table for resource synchronization status -->
    <update id="createResSyncStatusTable">
        IF NOT EXISTS (select name from sysobjects where name = 'tbl_ressyncstatus')
        EXECUTE('create table tbl_ressyncstatus
        (
        uuid varchar(255) NOT NULL,
        resType varchar(255) NOT NULL
        )')
    </update>

    <!-- Update the synchrinous state of resource. -->
    <insert id="updateSyncStatus" parameterType="hashmap">
        insert into tbl_ressyncstatus (uuid, resType) values (#{uuid}, #{resType})
    </insert>

    <!-- Create the temporary table used to log data insertion -->
    <update id="createLogTable" parameterType="string">
        CREATE TABLE IF NOT EXISTS ${value}
        (
        resType varchar(255) NOT NULL,
        uuid char(36) NOT NULL,
        data varchar(255) NULL,
        operType int NOT NULL,
        serialType int NOT NULL,
        serial decimal NOT NULL PRIMARY KEY,
        INDEX indexResType (resType(100))
        )
    </update>

    <update id="createEmSerialTable">
        create table IF NOT EXISTS tbl_em_serial
        (
        uuid char(32) NOT NULL,
        serial decimal NOT NULL
        )
    </update>

    <!-- Reduce log table size be removing old records -->
    <delete id="truncateLogTable" parameterType="long">
        delete from tbl_log_1 where serial &lt; #{value}
    </delete>

    <!-- Get the current maximal serial number -->
    <select id="getMaxSerial" parameterType="string" resultType="long">
        select max(serial) from ${value}
    </select>

    <!-- Get the minimal serial number -->
    <select id="getMinSerial" parameterType="string" resultType="long">
        select min(serial) from ${value}
    </select>






    <delete id="deleteByTableFilter" parameterType="org.openo.sdno.mss.dao.pojo.DefaultInvTablePojo">
        delete ${tableName} from ${tableName}
        <if test="tableFilterList != null">
            <foreach item="item" collection="tableFilterList">
                inner join ${item.tableName} on
                <foreach item="attritem" collection="item.attrPropertyList" open="(" separator=" and " close=")">
                    ${tableName}.${attritem.attrName} = ${item.tableName}.${attritem.attrName}
                </foreach>
            </foreach>
        </if>
    </delete>
    <!-- Generic data query -->
    <select id="msDataQuery" parameterType="org.openo.sdno.mss.dao.pojo.InvMasterSlavesQueryPojo" resultType="hashmap">
        select
        <foreach item="item" collection="attrsList" separator=",">
            ${item.tableAlias}.${item.attrName}
            <if test="item.attrAlias != null">
                as ${item.attrAlias}
            </if>
        </foreach>
        from ${tableName} ${tableAlias}
        <if test="joinResList != null">
            <foreach item="item" collection="joinResList" separator=" ">
                left
                join ${item.tableName} ${item.tableAlias} on
                ${tableAlias}.${item.key} = ${item.tableAlias}.${item.masterKey}
            </foreach>
        </if>
        <where>
            <if test="filterSql != null">
                ${filterSql}
            </if>
        </where>
        <if test="orderFields != null">
            order by
            <foreach item="item" collection="orderFields" separator=",">
                ${item.attrName}
            </foreach>
        </if>
        limit ${fromIndex}, ${count}
    </select>


    <select id="msDataQueryCount" parameterType="org.openo.sdno.mss.dao.pojo.InvMasterSlavesQueryPojo"
        resultType="int">
        select count(*) from ${tableName} ${tableAlias}
        <if test="joinResList != null">
            <foreach item="item" collection="joinResList" separator=" ">
                left
                join ${item.tableName} ${item.tableAlias} on
                ${tableAlias}.${item.key} = ${item.tableAlias}.${item.masterKey}
            </foreach>
        </if>
        <where>
            <if test="filterSql != null">
                ${filterSql}
            </if>
        </where>
    </select>

    <!-- Relation data query -->
    <select id="msRelationDataQuery" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationCombinePojo"
        resultType="hashmap">
        select
        <foreach item="item" collection="attrsList" separator=",">
            ${item.tableAlias}.${item.attrName}
            <if test="item.attrAlias != null">
                as ${item.attrAlias}
            </if>
        </foreach>
        from ${tableName} ${tableAlias}
        <if test="relationTmpTableSql != null">
            inner join ${relationTmpTableSql} ${relationTempTableAlias}
            on ${tableAlias}.${masterKey} =
            ${relationTempTableAlias}.${relationKey}
        </if>
        <where>
            <if test="filterSql != null">
                ${filterSql}
            </if>
        </where>
        <if test="orderFields != null">
            order by
            <foreach item="item" collection="orderFields" separator=",">
                ${item.attrName}
            </foreach>
        </if>
        limit ${fromIndex}, ${count}
    </select>

    <!-- Relation data query: count -->
    <select id="msRelationDataQueryCount" parameterType="org.openo.sdno.mss.dao.pojo.InvRelationCombinePojo"
        resultType="int">
        select count(*)
        from ${tableName} ${tableAlias}
        <if test="relationTmpTableSql != null">
            inner join ${relationTmpTableSql} ${relationTempTableAlias}
            on ${tableAlias}.${masterKey} =
            ${relationTempTableAlias}.${relationKey}
        </if>
        <where>
            <if test="filterSql != null">
                ${filterSql}
            </if>
        </where>
        <if test="orderFields != null">
            order by
            <foreach item="item" collection="orderFields" separator=",">
                ${item.attrName}
            </foreach>
        </if>
    </select>
</mapper>
